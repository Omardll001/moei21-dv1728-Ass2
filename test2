# Write your bash script here.
server=localhost
serverport=5352;
tests=100
drop_prob=30

echo "Date:" $(date)
echo "Starting your server on $server:$serverport"
unbuffer ./udpserver ${server}:$serverport &> server.log 2>server_err.log &
SERVER_PID=$!    
echo "Sleep abit."
sleep 1
echo "server on " $(lsof -i:$serverport  | grep udpserver)


serverStatus=$(lsof -i:$serverport | grep udpserver)
if [[ $serverStatus == *"IPv4"* ]]; then
    echo "Looks good, you got a IPv4 Socket"
else
    echo "Strange, you should have a IPv4 Socket for your server."
    echo "You have $serverStatus ."
    echo "I'll kill the server, and print any log it generated."
    kill $SERVER_PID
    killall udpserver
    sleep 1
    echo "This was the log"
    cat server.log
    echo "<end of log>"
    exit 1
fi

echo "PID = $SERVER_PID ??" 
echo "Checking server.log"
cat server.log 


SRV_PID=$(lsof -i:$serverport | grep udpserver | awk '{print $2}')

echo "Check that server started, SRV_PID = $SRV_PID ".

if [ ! -f "server.log" ]; then
    echo "Server.log was not created, problems. " 
    echo "killing server as a safety. " 
    killall udpserver
    echo "Make sure that your server does _some_ print out, its enough to state that is running."
    exit 1
fi
   

if [ -z "$SRV_PID" ]; then
    echo "There does not seem to be a server running on $serverport."
    echo "Server Evaluation: Serverfailed, did not start " 
    lsof -i:$serverport 
    echo "server.log=> " $(cat server.log) " EOL"
    echo "Logging server as failed. " 
    killall udpserver
    exit 1
fi

echo "Running automatic testing, it will send requests and collect the response."
echo "The test runs in the background, and we just 'wait' for it to complete. "
echo "If it does not, we abort."
echo "We will run $tests tests with a $drop_prop of a client dropping a message, max 60s. Your server needs to fast enough to handle 100/60 customers/s"


 rm -rf server_test.log
./bulkUDPclient ${server}:$serverport $tests $drop_prob server_test.log >client.log &


#echo "server on1 " $(lsof -i:$serverport  | grep server)

 ##Is serverlog open, if so server is running.
servStat=$(lsof -- server.log)
echo "servStat=$servStat|"

if [ -z "$servStat" ]; then
    echo "The server.log file was closed. " 
    echo "server.log=> " 
    echo "---------------------"
    cat server.log
    echo "---------------------"
    echo "server on1 " $(lsof -i:$serverport  | grep server)
    echo "server_err.log"
    echo "---------------------"
    cat server_err.log
    echo "---------------------"

    echo "server_test.log"
    echo "---------------------"
    cat server_test.log
    echo "---------------------"


    echo "client.log"
    echo "---------------------"
    cat client.log
    echo "---------------------"

    echo "Server Evaluation: Serverfailed, did not start " 
    lsof -i:$serverport       
    echo "Logging server as failed - |$servStat|. " 
    exit 1
fi
   


echo "Waiting for test to complete, max 60s";
## Wait for test to complete
timOutCnt=0;
while [ ! -s "server_test.log" ]; do
    sleep 1;
    ((timOutCnt=timOutCnt+1))
    echo -n "."
    #echo -e "$timOutCnt, ";
    if (( $timOutCnt > 60 )); then
	   echo "Timeout, server did not complete task within 60s."
       echo "Dumping data;"

      echo "server_test.log (from Testing solution)"
       echo "---------------------"
       cat  server_test.log
       echo "---------------------"

       echo "server.log (from your servers STDOUT)"
       echo "---------------------"
       cat  server.log
       echo "---------------------"

       echo "server_err.log (from your servers STDERR)"
       echo "---------------------"
       cat  server_err.log
       echo "---------------------"

       echo "client.log (from tester)"
       echo "---------------------"
       cat client.log
       echo "---------------------"


	   break;
    fi
done
   
echo "Killing server & client"
kill $SERVER_PID $SRV_PID
killall udpserver


 
if (( $timOutCnt > 60)); then
    echo "Solution TIMEDOUT, it did not complete in time."
    echo $(cat server_test.log)
    exit 1
else 
    echo $(cat server_test.log)
    result=$(cat client.log | grep 'SUMMARY: PASSED!')
    if [ -z "$result" ]; then
        echo "Problems, see logs"
        echo -e "--------------***-----------2\n\n"
        cat client.log
        exit 1
    fi
    tail -1 client.log
fi